{"version":2,"name":"Bot Resources - Savior Engine","disableSend":false,"placeBeforeInput":true,"injectInput":false,"color":"rgba(0, 0, 0, 0)","onlyBorderColor":false,"qrList":[{"id":2,"icon":"fa-cogs","showLabel":true,"label":"Main","title":"","message":"/import from=\"Bot Resources - Savior Engine.Config\"\n\tbasic_config as cfg\n\tpreset_config as pre\n\tprompt_get as prmt\n\temo_status as estat\n\tment_status as mstat\n|\n/import from=\"Bot Resources - Savior Engine.Inject\"\n\tinject_cot as inj_cot\n\tinject_mind as inj_m\n\tinject_love as inj_l\n\tinject_remove as inj_rem\n|\n/import from=\"Bot Resources - Savior Engine.CoT Start\"\n\tcot_prompt\n\tcot_base_gen as base_gen\n|\n/import from=\"Bot Resources - Savior Engine.Emotion\"\n\tcot_emo1_prompt\n\tcot_emo2_prompt\n\tcot_emo1_gen as emo1_gen\n\tcot_emo2_gen as emo2_gen\n\tclassify_emo as class_emo\n\treasoning_emo as reason_emo\n|\n/import from=\"Bot Resources - Savior Engine.Mind\"\n\n|\n\n\n//###FUNCTIONS###// |\n/let var_check {:\n\t/:cfg get=\"start_l\" |\n\t\t/let love_get {{pipe}} |\n\t\t\n\t/:cfg get=\"start_m\" |\n\t\t/let mind_get {{pipe}} |\n\n\t/if left=\"{{getvar::se_loveprmt}}\" right=\"\" rule=eq {:\n\t\t/setvar key=se_loveprmt \"None\" |\n\t:}|\n\t\n\t/if left=\"{{getvar::se_mindprmt}}\" right=\"\" rule=eq {:\n\t\t/setvar key=se_loveprmt \"None\" |\n\t:}|\n\t\n\t/if left=\"{{getvar::se_cot}}\" right=\"\" rule=eq {:\n\t\t/setvar key=se_loveprmt \"None\" |\n\t:}|\n\t\n\t/if left=\"{{getvar::se_love}}\" right=\"\" rule=eq {:\n\t\t/setvar key=se_love {{var::love_get}} |\n\t:}|\n\t\n\t/if left=\"{{getvar::se_mind}}\" right=\"\" rule=eq {:\n\t\t/setvar key=se_mind {{var::mind_get}} |\n\t:}|\n:}|\n\n/let input_change {: mesid= mescontent=\n\t/if left=\"{{getvar::se_mesid}}\" right=\"\" rule=eq {:\n\t\t/setvar key=se_mesid -1 |\n\t:}|\n\t\n\t/if left=\"{{getvar::se_mescontent}}\" right=\"\" rule=eq {:\n\t\t/setvar key=se_mescontent \"None\" |\n\t:}|\n\n\t\n\t/if left=mesid right={{getvar::se_mesid}} rule=neq else={:\n\t\t/if left=mescontent right={{getvar::se_mescontent}} rule=neq else={:\n\t\t\t/pass \"same\" |\n\t\t:}\n\t\t{:\n\t\t\t/pass \"change\" |\n\t\t:}|\n\t:}\n\t{:\n\t\t/if left=mesid right={{getvar::se_mesid}} rule=lt else={:\n\t\t\t/pass \"present\" |\n\t\t:}\n\t\t{:\n\t\t\t/pass \"past\" |\n\t\t:}|\n\t:}|\n\t\n\t/pass {{pipe}} |\n:}|\n\n/let mes_save {: mescot= meslove= mesmind=\n\t//setmesvar |\n\t//setmesvar |\n\t/setmesvar key=se_mescot \"{{var::mescot}}\" |\n\t/setmesvar key=se_meslove {{var::meslove}} |\n\t/setmesvar key=se_mesmind {{var::mesmind}} |\n:}|\n\n/let mes_load {:\n\t//getmesvar key=se_mesloveprmt |\n\t\t//setvar key=se_loveprmt {{pipe}} |\n\t//getmesvar key=se_mesmindprmt |\n\t\t//setvar key=se_mindprmt {{pipe}} |\n\t/getmesvar key=se_mescot |\n\t\t/setvar key=se_cot {{pipe}} |\n\t/getmesvar key=se_meslove |\n\t\t/setvar key=se_love {{pipe}} |\n\t/getmesvar key=se_mesmind |\n\t\t/setvar key=se_mind {{pipe}} |\n:}|\n\n/let preset_swap {: pick=\n\t/:pre get={{var::pick}} |\n\t/preset \"{{pipe}}\"\n:}|\n\n/let get_base {:\n\t/:cfg get=\"output_checker\" |\n\t/let check_set {{pipe}} |\n\t\n\t/:cfg get=\"output_checker_retries\" |\n\t/let check_retries {{pipe}} |\n\t\n\t/:preset_swap pick=\"cot_base_preset\" |\n\t\n\t/if left=check_set right=true rule=neq else={:\n\t\t/times {{var::check_retries}} {:\n\t\t\t/:base_gen |\n\t\t\t/let gen_get {{pipe}} |\n\t\t\t\n\t\t\t/input default=\"{{var::gen_get}}\" rows=20 Look good? Cancel to regen. |\n\t\t\t/let input_get {{pipe}} |\n\t\t\t\n\t\t\t/if left=\"{{var::input_get}}\" right=\"\" rule=neq {:\n\t\t\t\t/break {{var::input_get}} |\n\t\t\t:}|\n\t\t:}|\n\t\t\n\t\t/pass {{pipe}} |\n\t:}\n\t{:\n\t\t/:base_gen |\n\t\t\n\t\t/pass {{pipe}} |\n\t:}|\n\t/let input_get {{pipe}} |\n\t\n\t/:preset_swap pick=\"default\" |\n\t\n\t/pass {{var::input_get}} |\n:}|\n\n/let get_emo1 {:\n\t/:cfg get=\"output_checker\" |\n\t/let check_set {{pipe}} |\n\t\n\t/:cfg get=\"output_checker_retries\" |\n\t/let check_retries {{pipe}} |\n\t\n\t/:preset_swap pick=\"cot_emo1_preset\" |\n\t\n\t/if left=check_set right=true rule=neq else={:\n\t\t/times {{var::check_retries}} {:\n\t\t\t/:emo1_gen |\n\t\t\t/let gen_get {{pipe}} |\n\t\t\t\n\t\t\t/input default=\"{{var::gen_get}}\" rows=20 Look good? Cancel to regen. |\n\t\t\t/let input_get {{pipe}} |\n\t\t\t\n\t\t\t/if left=\"{{var::input_get}}\" right=\"\" rule=neq {:\n\t\t\t\t/break {{var::input_get}} |\n\t\t\t:}|\n\t\t:}|\n\t\t\n\t\t/pass {{pipe}} |\n\t:}\n\t{:\n\t\t/:emo1_gen |\n\t\t\n\t\t/pass {{pipe}} |\n\t:}|\n\t/let input_get {{pipe}} |\n\t\n\t/:preset_swap pick=\"default\" |\n\t\n\t/pass {{var::input_get}} |\n:}|\n\n/let get_emo2 {:\n\t/:cfg get=\"output_checker\" |\n\t/let check_set {{pipe}} |\n\t\n\t/:cfg get=\"output_checker_retries\" |\n\t/let check_retries {{pipe}} |\n\t\n\t/:preset_swap pick=\"cot_emo_class_preset\" |\n\t\n\t/if left=check_set right=true rule=neq else={:\n\t\t/times {{var::check_retries}} {:\n\t\t\t/:class_emo |\n\t\t\t/let gen_get {{pipe}} |\n\t\t\t\n\t\t\t/input default=\"{{var::gen_get}}\" rows=20 Look good? Cancel to regen. |\n\t\t\t/let input_get {{pipe}} |\n\t\t\t\n\t\t\t/if left=\"{{var::input_get}}\" right=\"\" rule=neq {:\n\t\t\t\t/break {{var::input_get}} |\n\t\t\t:}|\n\t\t:}|\n\t\t\n\t\t/pass {{pipe}} |\n\t:}\n\t{:\n\t\t/:class_emo |\n\t\t\n\t\t/pass {{pipe}} |\n\t:}|\n\t/let input_get {{pipe}} |\n\t\n\t/:preset_swap pick=\"default\" |\n\t\n\t/pass {{var::input_get}} |\n:}|\n\n/let get_emo3 {:\n\t/:cfg get=\"output_checker\" |\n\t/let check_set {{pipe}} |\n\t\n\t/:cfg get=\"output_checker_retries\" |\n\t/let check_retries {{pipe}} |\n\t\n\t/:preset_swap pick=\"cot_emo_reason_preset\" |\n\t\n\t/if left=check_set right=true rule=neq else={:\n\t\t/times {{var::check_retries}} {:\n\t\t\t/:reason_emo |\n\t\t\t/let gen_get {{pipe}} |\n\t\t\t\n\t\t\t/input default=\"{{var::gen_get}}\" rows=20 Look good? Cancel to regen. |\n\t\t\t/let input_get {{pipe}} |\n\t\t\t\n\t\t\t/if left=\"{{var::input_get}}\" right=\"\" rule=neq {:\n\t\t\t\t/break {{var::input_get}} |\n\t\t\t:}|\n\t\t:}|\n\t\t\n\t\t/pass {{pipe}} |\n\t:}\n\t{:\n\t\t/:reason_emo |\n\t\t\n\t\t/pass {{pipe}} |\n\t:}|\n\t/let input_get {{pipe}} |\n\t\n\t/:preset_swap pick=\"default\" |\n\t\n\t/pass {{var::input_get}} |\n:}|\n\n/let get_emo4 {:\n\t/:cfg get=\"output_checker\" |\n\t/let check_set {{pipe}} |\n\t\n\t/:cfg get=\"output_checker_retries\" |\n\t/let check_retries {{pipe}} |\n\t\n\t/:preset_swap pick=\"cot_emo2_preset\" |\n\t\n\t/if left=check_set right=true rule=neq else={:\n\t\t/times {{var::check_retries}} {:\n\t\t\t/:emo2_gen |\n\t\t\t/let gen_get {{pipe}} |\n\t\t\t\n\t\t\t/input default=\"{{var::gen_get}}\" rows=20 Look good? Cancel to regen. |\n\t\t\t/let input_get {{pipe}} |\n\t\t\t\n\t\t\t/if left=\"{{var::input_get}}\" right=\"\" rule=neq {:\n\t\t\t\t/break {{var::input_get}} |\n\t\t\t:}|\n\t\t:}|\n\t\t\n\t\t/pass {{pipe}} |\n\t:}\n\t{:\n\t\t/:emo2_gen |\n\t\t\n\t\t/pass {{pipe}} |\n\t:}|\n\t/let input_get {{pipe}} |\n\t\n\t/:preset_swap pick=\"default\" |\n\t\n\t/pass {{var::input_get}} |\n:}|\n//###FUNCTIONS###// |\n/flushinject |\n/:var_check |\n\n/:get_base |\n/let cot_out {{pipe}} |\n\n/re-replace find=/(\\n)?```(\\n)?/g replace=\"{{noop}}\" {{var::cot_out}} |\n/re-replace find=/(\\n)?<[^<>]*>(\\n)?/g replace=\"{{noop}}\" {{pipe}} |\n/let cot_start {{pipe}} |\n\n\n\n/:prmt get=\"cot_inject_wrap_top\" |\n/let cot_top {{pipe}} |\n\n/:prmt get=\"cot_inject_wrap_bottom\" |\n/let cot_bottom {{pipe}} |\n\n/let cot_inject {{var::cot_start}} |\n/:inj_cot idepth=0 iscan=false irole=assistant iprompt=\"{{var::cot_inject}}\" |\n\n\n\n/:get_emo1 |\n/var key=cot_out {{pipe}} |\n\n/re-replace find=/(\\n)?```(\\n)?/g replace=\"{{noop}}\" {{var::cot_out}} |\n/re-replace find=/(\\n)?<[^<>]*>(\\n)?/g replace=\"{{noop}}\" {{pipe}} |\n/var key=cot_emo {{pipe}} |\n\n\n\n/var key=cot_inject {{var::cot_start}}{{newline}}{{newline}}{{var::cot_emo}} |\n/:inj_cot idepth=0 iscan=false irole=assistant iprompt=\"{{var::cot_inject}}\" |\n\n\n\n/:get_emo2 |\n/let emotion_out {{pipe}} |\n\n/:get_emo3 emo={{var::emotion_out}} |\n/let emo_reason_out {{pipe}} |\n\n\n\n/:prmt get=\"cot_emo_cls\" |\n/let emo_cls {{pipe}}{{var::emotion_out}} |\n\n/var key=cot_emo \"{{var::cot_emo}}\n- {{var::emo_cls}}\n- {{var::emo_reason_out}}\" |\n\n\n\n/var key=cot_inject {{var::cot_start}}{{newline}}{{newline}}{{var::cot_emo}} |\n/:inj_cot idepth=0 iscan=false irole=assistant iprompt=\"{{var::cot_inject}}\" |\n\n\n\n/:get_emo4 |\n/var key=cot_out {{pipe}} |\n\n/re-replace find=/(\\n)?```(\\n)?/g replace=\"{{noop}}\" {{var::cot_out}} |\n/re-replace find=/(\\n)?<[^<>]*>(\\n)?/g replace=\"{{noop}}\" {{pipe}} |\n/var key=cot_emo \"{{var::cot_emo}}\n{{pipe}}\" |","contextList":[],"preventAutoExecute":true,"isHidden":false,"executeOnStartup":false,"executeOnUser":true,"executeOnAi":false,"executeOnChatChange":false,"executeOnGroupMemberDraft":false,"executeOnNewChat":false,"automationId":""},{"id":4,"icon":"fa-cog","showLabel":true,"label":"Config","title":"","message":"// -----Basic-Config----- |\n/let basic_config {: get=\n\t// ---EDIT-ME--- |\n\t// -v-Values for the paranoid-v- |\n\t\n\t/let output_checker true |\n\t// Allows viewing and editing of outputs before they are used. (true/false) |\n\t\t/let output_checker_retries 5 |\n\t\n\t\n\t/let start_l 25 |\n\t\n\t/let start_m 50 |\n\t\n\t// -v-Min/Max Status values-v- |\n\t\n\t/let max_l 200 |\n\t// The maximum value of 'Love' stat. (Number) |\n\t/let max_m 100 |\n\t// The maximum value of 'Mental' stat. (Number) |\n\t\n\t/let allow_neg false |\n\t// Allow/Disallow negative values for stats. (true/false) |\n\t\n\t\t/let min_l -100 |\n\t\t// [If allow_neg true] The minimum value of 'Love' stat. (Negative number) |\n\t\t/let min_m -50 |\n\t\t// [If allow_neg true] The minimum value of 'Mental' stat. (Negative number) |\n\t\n\t\n\t// -v-Randomized Status Values-v- |\n\t\n\t/let random_gains_loss false |\n\t// Enable/Disable randomized losses and gains. (true/false) |\n\t\n\t\t/let rand_gain_max 3 |\n\t\t// [If random_gains_loss true] |\n\t\t/let rand_gain_min 1 |\n\t\t// [If random_gains_loss true] |\n\t\t\n\t\t/let rand_loss_max 3 |\n\t\t// [If random_gains_loss true] |\n\t\t/let rand_loss_min 1 |\n\t\t// [If random_gains_loss true] |\n\t\n\t\n\t// -v-Stat Lock Conditions-v- |\n\t\n\t/let lock_m_degradation false |\n\t// |\n\t/let lock_l_gains false |\n\t// |\n\t\n\t/let max_l_lock true |\n\t// |\n\t/let max_m_lock true |\n\t// |\n\t\n\t/let max_m_lock_after_l_lock true |\n\t// |\n\t/let max_l_locks_m_gains false |\n\t// |\n\t\n\t/let badend_lockin false |\n\t// [If lock_m_degradation false] Lock 'Mental' stat upon reaching minimum value. (true/false) |\n\t\n\t// ---EDIT-ME--- |\n\t\t\n\t/var {{var::get}} |\n\t/pass {{pipe}} |\n:} |\n// -----Basic-Config----- |\n\n\n// -----Gen-Prompts----- |\n/let prompt_get {: get=\n\t// ---EDIT-ME--- |\n\t/let emotion_prompt_classify \"[Pause your role-play\n{\nClassify the current emotion of {{char}};\nOutput just one word, e.g. \\\"joy\\\" or \\\"anger\\\";\nChoose only one of the following labels: \" |\n\n\t\t/let emotion_class_end \"\n}]\" |\n\t\n\t/let emotion_prompt_reasoning \"[Pause your role-play\n{\nMy current emotion is {{getvar::se_emo}};\nI will output the reason why that is considering the chat history;\nI will only output the reason I feel this way;\n}]\" |\n\t\n\t/let mental_prompt \"\" |\n\t\n\t/let love_prompt \"\" |\n\t\n\t/let cot_prompt \"Respond with <thinking> box; Considering the chat history;\nfill out the TEMPLATE while strictly following it; Fill placeholders;\nONLY OUTPUT THE <thinking> BOX AND FOLLOW THE TEMPLATE SYNTAX EXACTLY, NOTHING ELSE;\n\nTEMPLATE:\n\" |\n\t\n\t\t/let cot_wrap_start \"[Pause the role-play\n{\n\" |\n\t\t\n\t\t/let cot_wrap_end \"}]\" |\n\t\t\n\t\t/let cot_base \"```\n<thinking>\n- I am \\{\\{char}}\n- My body is X Y Z\n- \\{\\{user}} is X\n- My body placement is X\n- Me and \\{\\{user}} are X\n\" |\n\t\n\t\t/let cot_emo_1 \"```\n<thinking>\n- My personality is X\n- What I should react to? X Y\n- Do I like this situation? yes/no? X Y Z\n\" |\n\n\t\t/let cot_emo_2 \"```\n<thinking>\n- How I should react to {{user}}? X Y\n\" |\n\t\t\n\t\t/let cot_emo_cls \"- My current emotion is \" |\n\n\t\t/let cot_m_1 \"```\n<thinking>\n- Known factors: X Y\n- Unknown factors: X Y Z\n- Given my personality and how I feel about this situation, should I worry about these unknown factors? Yes/No? X Y Z\n\" |\n\t\t\n\t\t/let cot_m_2 \"\" |\n\t\t\n\t\t/let cot_l_1 \"\" |\n\t\t\n\t\t/let cot_l_2 \"\" |\n\t\t\n\t\t/let cot_rp \"\" |\n\t\t\n\t\t/let cot_end_1 \"</thinking>\n```\n\" |\n\t\t\n\t/let cot_inject_wrap_top \"```\n<thinking>\n\" |\n\t\n\t/let cot_inject_wrap_bottom \"\n</thinking>\n```\" |\n\t// ---EDIT-ME--- |\n\t\n\t/var {{var::get}} |\n\t/pass {{pipe}} |\n:} |\n// -----Gen-Prompts----- |\n\n\n// -----Emotion-Config----- |\n/let emo_status {: get=\n\t\n\t/let emo_list [\"admiration\", \"amusement\", \"anger\", \"annoyance\", \"approval\", \"caring\", \"confusion\", \"curiosity\", \"desire\", \"disappointment\", \"disapproval\", \"disgust\", \"embarrassment\", \"excitement\", \"fear\", \"gratitude\", \"grief\", \"joy\", \"love\", \"nervousness\", \"neutral\", \"optimism\", \"pride\", \"realization\", \"relief\", \"remorse\", \"sadness\", \"surprise\"] |\n\t\n\t/var {{var::get}} |\n\t/pass {{pipe}} |\n:} |\n// -----Emotion-Config----- |\n\n\n// -----Mental-Config----- |\n/let ment_status {: get=\n\t\n\t/let m_lvl_1_prmt \"[{{char}}'s Mental State\n{\n\n}]\" |\n\t\n\t\t/let m_lvl_1_max 25 |\n\t\t\n\t\t/let m_lvl_1_name \"Horrible\" |\n\t\t\n\t\t\n\t/let m_lvl_2_prmpt \"[{{char}}'s Mental State\n{\n\n}]\" |\n\t\n\t\t/let m_lvl_2_max 50 |\n\t\t\n\t\t/let m_lvl_2_name \"Bad\" |\n\t\t\n\t\t\n\t/let m_lvl_3_prmpt \"[{{char}}'s Mental State\n{\n\n}]\" |\n\t\n\t\t/let m_lvl_3_max 75 |\n\t\t\n\t\t/let m_lvl_3_name \"Normal\" |\n\t\t\n\t\t\n\t/let m_lvl_4_prmpt \"[{{char}}'s Mental State\n{\n\n}]\" |\n\t\n\t\t/let m_lvl_4_max 100 |\n\t\t\n\t\t/let m_lvl_4_name \"Good\" |\n\t\t\n\t\t\n\t/let m_lvl_max_prmpt \"[{{char}}'s Mental State\n{\n\n}]\" |\n\t\n\t\t/let m_lvl_max_name \"Great\" |\n\t\n\t\n\t\n\t/let m_neg_lvl_1_prmt \"[{{char}}'s Mental State\n{\n\n}]\" |\n\t\n\t\t/let m_neg_lvl_1_max 0 |\n\t\t\n\t\t/let m_neg_lvl_1_name \"\" |\n\t\t\n\t\t\n\t/let m_neg_lvl_2_prmpt \"[{{char}}'s Mental State\n{\n\n}]\" |\n\t\n\t\t/let m_neg_lvl_2_max -25 |\n\t\t\n\t\t/let m_neg_lvl_2_name \"\" |\n\t\t\n\t\t\n\t/let m_neg_lvl_3_prmpt \"[{{char}}'s Mental State\n{\n\n}]\" |\n\t\n\t\t/let m_neg_lvl_3_max -50 |\n\t\t\n\t\t/let m_neg_lvl_3_name \"\" |\n\t\t\n\t\t\n\t/let m_neg_lvl_4_prmpt \"[{{char}}'s Mental State\n{\n\n}]\" |\n\t\n\t\t/let m_neg_lvl_4_max -75 |\n\t\t\n\t\t/let m_neg_lvl_4_name \"\" |\n\t\t\n\t\t\n\t/let m_neg_lvl_max_prmpt \"[{{char}}'s Mental State\n{\n\n}]\" |\n\t\n\t\t/let m_neg_lvl_max_name \"\" |\n\n:} |\n// -----Mental-Config----- |\n\n\n// -----Love-Config----- |\n/let luv_status {: get=\n\t\n\t/let l_lvl_1_prmt \"\" |\n\t\n\t\t/let l_lvl_1_max 40 |\n\t\t\n\t\t/let l_lvl_1_name \"\" |\n\t\n\t\n\t/let l_lvl_2_prmt \"\" |\n\t\n\t\t/let l_lvl_2_max 80 |\n\t\t\n\t\t/let l_lvl_2_name \"\" |\n\t\t\n\t\n\t/let l_lvl_3_prmt \"\" |\n\t\n\t\t/let l_lvl_3_max 120 |\n\t\t\n\t\t/let l_lvl_3_name \"\" |\n\t\t\n\t\t\n\t/let l_lvl_4_prmt \"\" |\n\t\n\t\t/let l_lvl_4_max 160 |\n\t\t\n\t\t/let l_lvl_4_name \"\" |\n\t\t\n\t\t\n\t/let l_lvl_5_prmt \"\" |\n\t\n\t\t/let l_lvl_5_max 200 |\n\t\t\n\t\t/let l_lvl_5_name \"\" |\n\t\t\n\t\t\n\t/let l_lvl_max_prmt \"\" |\n\t\n\t\t/let l_lvl_max_name \"\" |\n\t\n\t\n\t\n\t\n\t/let l_neg_lvl_1_prmt \"\" |\n\t\n\t\t/let l_neg_lvl_1_max 0 |\n\t\t\n\t\t/let l_neg_lvl_1_name \"\" |\n\t\t\n\t\t\n\t/let l_neg_lvl_2_prmt \"\" |\n\t\n\t\t/let l_neg_lvl_2_max -40 |\n\t\t\n\t\t/let l_neg_lvl_2_name \"\" |\n\t\t\n\t\t\n\t/let l_neg_lvl_3_prmt \"\" |\n\t\n\t\t/let 1_neg_lvl_3_max -80 |\n\t\t\n\t\t/let l_neg_lvl_3_name \"\" |\n\t\t\n\t\t\n\t/let l_neg_lvl_4_prmt \"\" |\n\t\n\t\t/let l_neg_lvl_4_max -120 |\n\t\t\n\t\t/let l_neg_lvl_4_name \"\" |\n\t\t\n\t\t\n\t/let l_neg_lvl_5_prmt \"\" |\n\t\n\t\t/let l_neg_lvl_5_max -160 |\n\t\t\n\t\t/let l_neg_lvl_5_name \"\" |\n\t\t\n\t\t\n\t/let l_neg_lvl_max_prmt \"\" |\n\t\n\t\t/let l_neg_lvl_max_name \"\" |\n:} |\n// -----Love-Config----- |\n\n/let preset_config {: get=\n\n\t/let default \"Class O\" |\n\t\n\t/let cot_base_preset \"CoT1\" |\n\t\n\t/let cot_emo1_preset \"CoT1\" |\n\t\n\t/let cot_emo_class_preset \"Emo1\" |\n\t\n\t/let cot_emo_reason_preset \"Emo2\" |\n\t\n\t/let cot_emo2_preset \"CoT1\" |\n\t\n\t/let cot_preset_6 \"\" |\n\t\n\t/let cot_preset_7 \"\" |\n\t\n\t/let cot_preset_8 \"\" |\n\t\n\t/let cot_preset_9 \"\" |\n\t\n\t/var {{var::get}} |\n\t/pass {{pipe}} |\n:}|","contextList":[],"preventAutoExecute":true,"isHidden":false,"executeOnStartup":false,"executeOnUser":false,"executeOnAi":false,"executeOnChatChange":false,"executeOnGroupMemberDraft":false,"executeOnNewChat":false,"automationId":""},{"id":20,"icon":"fa-syringe","showLabel":true,"label":"Inject","title":"","message":"/let inject_cot {: idepth=0 iscan=false irole=system iprompt=\n\t/inject id=se_cot position=chat depth={{var::idepth}} scan={{var::iscan}} role={{var::irole}} {{var::iprompt}} |\n:}|\n\n/let inject_mind {: iposition=chat idepth=0 iscan=false iprompt=\n\t/inject id=se_mind position={{var::iposition}} depth={{var::idepth}} scan={{var::iscan}} role=system {{var::iprompt}} |\n:}|\n\n/let inject_love {: iposition=chat idepth=0 iscan=false iprompt=\n\t/inject id=se_love position={{var::iposition}} depth={{var::idepth}} scan={{var::iscan}} role=system {{var::iprompt}} |\n:}|\n\n/let inject_remove {: iremove=\n\t/if left=iremove right=\"se_cot\" rule=eq {:\n\t\t/flushinject {{var::iremove}} |\n\t:}|\n\t\n\t/if left=iremove right=\"se_mind\" rule=eq {:\n\t\t/flushinject {{var::iremove}} |\n\t:}|\n\t\n\t/if left=iremove right=\"se_love\" rule=eq {:\n\t\t/flushinject {{var::iremove}} |\n\t:}|\n:}|","contextList":[],"preventAutoExecute":true,"isHidden":false,"executeOnStartup":false,"executeOnUser":false,"executeOnAi":false,"executeOnChatChange":false,"executeOnGroupMemberDraft":false,"executeOnNewChat":false,"automationId":""},{"id":16,"icon":"fa-list-dots","showLabel":true,"label":"CoT Start","title":"","message":"/import from=\"Bot Resources - Savior Engine.Config\"\n\tbasic_config as cfg\n\tprompt_get as prmt\n|\n\n/let cot_prompt {:\n\t/:prmt get=\"cot_wrap_start\" |\n\t/let get_1 {{pipe}} |\n\t\n\t/:prmt get=\"cot_prompt\" |\n\t/let get_2 {{pipe}} |\n\t\n\t/:prmt get=\"cot_base\" |\n\t/let get_3 {{pipe}} |\n\t\n\t/:prmt get=\"cot_end_1\" |\n\t/let get_4 {{pipe}} |\n\t\n\t/:prmt get=\"cot_wrap_end\" |\n\t/let get_5 {{pipe}} |\n\t\n\t/pass {{var::get_1}}{{var::get_2}}{{var::get_3}}{{var::get_4}}{{var::get_5}} |\n:}|\n\n/let cot_base_gen {:\n\t/:cot_prompt |\n\t/let prompt_get {{pipe}} |\n\t\n\t/gen lock=on as=system {{var::prompt_get}} |\n\t\n\t/pass {{pipe}} |\n:}|","contextList":[],"preventAutoExecute":true,"isHidden":false,"executeOnStartup":false,"executeOnUser":false,"executeOnAi":false,"executeOnChatChange":false,"executeOnGroupMemberDraft":false,"executeOnNewChat":false,"automationId":""},{"id":8,"icon":"fa-masks-theater","showLabel":true,"label":"Emotion","title":"","message":"/import from=\"Bot Resources - Savior Engine.Config\"\n\tprompt_get as prmt\n\temo_status as estat\n|\n\n/let cot_emo1_prompt {:\n\t/:prmt get=\"cot_wrap_start\" |\n\t/let get_1 {{pipe}} |\n\t\n\t/:prmt get=\"cot_prompt\" |\n\t/let get_2 {{pipe}} |\n\t\n\t/:prmt get=\"cot_emo_1\" |\n\t/let get_3 {{pipe}} |\n\t\n\t/:prmt get=\"cot_end_1\" |\n\t/let get_4 {{pipe}} |\n\t\n\t/:prmt get=\"cot_wrap_end\" |\n\t/let get_5 {{pipe}} |\n\t\n\t/pass {{var::get_1}}{{var::get_2}}{{var::get_3}}{{var::get_4}}{{var::get_5}} |\n:}|\n\n/let cot_emo2_prompt {:\n\t/:prmt get=\"cot_wrap_start\" |\n\t/let get_1 {{pipe}} |\n\t\n\t/:prmt get=\"cot_prompt\" |\n\t/let get_2 {{pipe}} |\n\t\n\t/:prmt get=\"cot_emo_2\" |\n\t/let get_3 {{pipe}} |\n\t\n\t/:prmt get=\"cot_end_1\" |\n\t/let get_4 {{pipe}} |\n\t\n\t/:prmt get=\"cot_wrap_end\" |\n\t/let get_5 {{pipe}} |\n\t\n\t/pass {{var::get_1}}{{var::get_2}}{{var::get_3}}{{var::get_4}}{{var::get_5}} |\n:}|\n\n/let cot_emo1_gen {:\n\t/:cot_emo1_prompt |\n\t/let prompt_get {{pipe}} |\n\t\n\t/gen lock=on as=system {{var::prompt_get}} |\n\t\n\t/pass {{pipe}} |\n:}|\n\n/let cot_emo2_gen {:\n\t/:cot_emo2_prompt |\n\t/let prompt_get {{pipe}} |\n\t\n\t/gen lock=on as=system {{var::prompt_get}} |\n\t\n\t/pass {{pipe}} |\n:}|\n\n/let classify_emo {:\n\t/:estat get=\"emo_list\" |\n\t/let emo_labels {{pipe}} |\n\t\n\t/:prmt get=\"emotion_prompt_classify\" |\n\t/let emo_classify {{pipe}} |\n\t\n\t/:prmt get=\"emotion_class_end\" |\n\t/let emo_class_end {{pipe}} |\n\t\n\t/gen lock=on as=system \"{{var::emo_classify}}{{var::emo_labels}}{{var::emo_class_end}}\" |\n\t/setvar key=se_emo {{pipe}} |\n\t\n\t/pass {{getvar::se_emo}} |\n:}|\n\n/let reasoning_emo {: emo=\n\t/:prmt get=\"emotion_prompt_reasoning\" |\n\t/let prompt_get {{pipe}} |\n\t\n\t/gen lock=on as=system {{var::prompt_get}} |\n\t\n\t/pass {{pipe}} |\n:}|\n\n","contextList":[],"preventAutoExecute":true,"isHidden":false,"executeOnStartup":false,"executeOnUser":false,"executeOnAi":false,"executeOnChatChange":false,"executeOnGroupMemberDraft":false,"executeOnNewChat":false,"automationId":""},{"id":10,"icon":"fa-brain","showLabel":true,"label":"Mental","title":"","message":"/import from=\"Bot Resources - Savior Engine.Config\"\n\tbasic_config as cfg\n\tprompt_get as prmt\n\tment_status as mstat\n|\n\n/let cot_mind_prompt1 {:\n\t/:prmt get=\"cot_wrap_start\" |\n\t/let get_1 {{pipe}} |\n\t\n\t/:prmt get=\"cot_prompt\" |\n\t/let get_2 {{pipe}} |\n\t\n\t/:prmt get=\"cot_m_1\" |\n\t/let get_3 {{pipe}} |\n\t\n\t/:prmt get=\"cot_end_1\" |\n\t/let get_4 {{pipe}} |\n\t\n\t/:prmt get=\"cot_wrap_end\" |\n\t/let get_5 {{pipe}} |\n\t\n\t/pass {{var::get_1}}{{var::get_2}}{{var::get_3}}{{var::get_4}}{{var::get_5}} |\n:}|\n\n/let cot_mind_prompt2 {:\n\t/:prmt get=\"cot_wrap_start\" |\n\t/let get_1 {{pipe}} |\n\t\n\t/:prmt get=\"cot_prompt\" |\n\t/let get_2 {{pipe}} |\n\t\n\t/:prmt get=\"cot_m_2\" |\n\t/let get_3 {{pipe}} |\n\t\n\t/:prmt get=\"cot_end_1\" |\n\t/let get_4 {{pipe}} |\n\t\n\t/:prmt get=\"cot_wrap_end\" |\n\t/let get_5 {{pipe}} |\n\t\n\t/pass {{var::get_1}}{{var::get_2}}{{var::get_3}}{{var::get_4}}{{var::get_5}} |\n:}|\n\n/let mind_gen1 {:\n\t/:cot_mind_prompt1 |\n\t/let prompt_get {{pipe}} |\n\t\n\t/gen lock=on as=system {{var::prompt_get}} |\n\t\n\t/pass {{pipe}} |\n:}|\n\n/let mind_prompt_get {:\n\n:}|\n\n/let mind_clac {: change=\n\t/:cfg get=\"max_m\" |\n\t\t/let max {{pipe}} |\n\t/:cfg get=\"max_l\" |\n\t\t/let max_l {{pipe}} |\n\t/:cfg get=\"allow_neg\" |\n\t\t/let neg_val {{pipe}} |\n\t\t/:cfg get=\"min_m\" |\n\t\t\t/let min {{pipe}} |\n\t/:cfg get=\"random_gains_loss\" |\n\t\t/let random_calc {{pipe}} |\n\t\t/:cfg get=\"rand_gain_max\" |\n\t\t\t/let rand_add_max {{pipe}} |\n\t\t/:cfg get=\"rand_gain_min\" |\n\t\t\t/let rand_add_min {{pipe}} |\n\t\t/:cfg get=\"rand_loss_max\" |\n\t\t\t/let rand_sub_max {{pipe}} |\n\t\t/:cfg get=\"rand_loss_min\" |\n\t\t\t/let rand_sub_min {{pipe}} |\n\t/:cfg get=\"lock_m_degradation\" |\n\t\t/let deg_lock {{pipe}} |\n\t/:cfg get=\"max_m_lock\" |\n\t\t/let max_lock {{pipe}} |\n\t/:cfg get=\"max_m_lock_after_l_lock\" |\n\t\t/let max_lock_l {{pipe}} |\n\t/:cfg get=\"max_l_locks_m_gains\" |\n\t\t/let lock_l {{pipe}} |\n\t/:cfg get=\"badend_lockin\" |\n\t\t/let badend {{pipe}} |\n\t\t\n\t/if left=deg_lock right=0 rule=gt else={:\n\t\t/if left=neg_val right=true rule=eq else={:\n\t\t\t/if left=se_mind right=max rule=gte else={:\n\t\t\t\t\n\t\t\t:}\n\t\t\t{:\n\t\t\t\t/ife {: /test left=max_lock rule=eq right=true | :}| /then {:\n\t\t\t\t\t/pass \"max\"\n\t\t\t\t:}|\n\t\t\t\t/elseif {: /test left=max_lock_l rule=eq right=true | :}| /then {:\n\t\t\t\t\t/if left=se_love right=max_l rule=gte else={:\n\t\t\t\t\t\t/add se_mind {{var::change}} |\n\t\t\t\t\t\t\n\t\t\t\t\t\t/setvar key=se_mind {{pipe}} |\n\t\t\t\t\t\t/pass {{var::change}} |\n\t\t\t\t\t\t\n\t\t\t\t\t\t/if left=se_mind right=max rule=gt {:\n\t\t\t\t\t\t\t/setvar key=se_mind {{var::max}} |\n\t\t\t\t\t\t\t/pass {{var::change}} |\n\t\t\t\t\t\t:}\n\t\t\t\t\t:}\n\t\t\t\t\t{:\n\t\t\t\t\t\t/pass \"max\"\n\t\t\t\t\t:}|\n\t\t\t\t:}|\n\t\t\t:}|\n\t\t:}\n\t\t{:\n\t\t\n\t\t:}|\n\t:}\n\t{:\n\t\t/pass \"lock\"\n\t:}|\n\n:}|\n\n/let mind_point_get {:\n\t/:prmt get=\"mental_prompt\" |\n\t/let prompt_get {{pipe}} |\n\t\n\t\n:}|\n\n/let mind_gen2 {:\n\n:}|","contextList":[],"preventAutoExecute":true,"isHidden":false,"executeOnStartup":false,"executeOnUser":false,"executeOnAi":false,"executeOnChatChange":false,"executeOnGroupMemberDraft":false,"executeOnNewChat":false,"automationId":""},{"id":12,"icon":"fa-heart","showLabel":true,"label":"Love","title":"","message":"/import from=\"Bot Resources - Savior Engine.Config\"\n\tbasic_config as cfg\n\tprompt_get as prmt\n\tluv_status as lstat\n|","contextList":[],"preventAutoExecute":true,"isHidden":false,"executeOnStartup":false,"executeOnUser":false,"executeOnAi":false,"executeOnChatChange":false,"executeOnGroupMemberDraft":false,"executeOnNewChat":false,"automationId":""},{"id":18,"icon":"fa-list-dots","showLabel":true,"label":"CoT End","title":"","message":"","contextList":[],"preventAutoExecute":true,"isHidden":false,"executeOnStartup":false,"executeOnUser":false,"executeOnAi":false,"executeOnChatChange":false,"executeOnGroupMemberDraft":false,"executeOnNewChat":false,"automationId":""},{"id":6,"icon":"fa-dashboard","showLabel":true,"label":"Codeblock Status Menu","title":"","message":"/import from=\"Bot Resources - Savior Engine.Config\"\n\tbasic_config as cfg\n\tprompt_get as prmt\n\temo_status as estat\n\tment_status as mstat\n\tluv_status as lstat\n|","contextList":[],"preventAutoExecute":true,"isHidden":false,"executeOnStartup":false,"executeOnUser":false,"executeOnAi":false,"executeOnChatChange":false,"executeOnGroupMemberDraft":false,"executeOnNewChat":false,"automationId":""}],"idIndex":22}